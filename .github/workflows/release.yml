name: Javascript Wrapper Release

on:
  workflow_call:
    inputs:
      cliTag:
        description: 'CLI tag name'
        required: false
        type: string
        default: 2.0.0-nightly
      jsTag:
        description: 'JS Wrapper tag name'
        required: false
        type: string
        default: nightly
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      cliTag:
        description: 'CLI tag name (ignored if not dev build)'
        required: false
      jsTag:
        description: 'Tag name (ignored if not dev build)'
        required: false
        type: string
        default: rc
      dev:
        description: 'Is dev build'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  delete:
    uses: CheckmarxDev/ast-cli-javascript-wrapper-runtime-cli/.github/workflows/delete-packages-and-releases.yml@main
    with:
      tag: ${{ inputs.jsTag }}
    secrets: inherit
    if: inputs.dev == true
  release:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.OR_GITHUB_TOKEN }}
      BRANCH_NAME: npm-version-patch
    outputs:
      TAG_NAME: ${{ steps.generate_tag_name.outputs.TAG_NAME }}
      CLI_VERSION: ${{ steps.extract_cli_version.outputs.CLI_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Configuration 
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - uses: actions/setup-node@v4.0.2
        with:
          node-version: 22.11.0
          registry-url: https://npm.pkg.github.com/

      - name: Generate Tag name
        id: generate_tag_name
        run: |
          if [ "${{ inputs.dev }}" == "true" ]; then
            TAG_NAME=$(npm version prerelease --preid=${{ inputs.jsTag }} --no-git-tag-version --allow-same-version)
          else
            TAG_NAME=$(npm version patch --no-git-tag-version)
          fi
          
          echo "Generated TAG_NAME: $TAG_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "::set-output name=TAG_NAME::$TAG_NAME"
      
      - name: Extract CLI version
        id: extract_cli_version
        run: |
          CLI_VERSION=$(cat checkmarx-ast-cli.version | grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+')
          echo "CLI version being packed is $CLI_VERSION"
          echo "CLI_VERSION=$CLI_VERSION" >> $GITHUB_ENV
          echo "::set-output name=CLI_VERSION::$CLI_VERSION"

      - name: Check if CLI version is latest
        id: check_latest_cli_version
        run: |
          set -x  # Enable debug mode to show all commands being executed
          
          echo "=== Starting CLI version check ==="
          echo "Current CLI_VERSION from environment: $CLI_VERSION"
          echo "CLI_VERSION from step output: ${{ steps.extract_cli_version.outputs.CLI_VERSION }}"
          
          echo "=== Fetching latest release from GitHub ==="
          echo "Calling: curl -s https://github.com/Checkmarx/ast-cli/releases/latest"
          
          # Get the raw response for debugging
          RAW_RESPONSE=$(curl -s https://github.com/Checkmarx/ast-cli/releases/latest)
          echo "=== Raw curl response length: ${#RAW_RESPONSE} characters ==="
          
          # Show first 500 characters of response for debugging
          echo "=== First 500 characters of response ==="
          echo "$RAW_RESPONSE" | head -c 500
          echo ""
          echo "=== End of response preview ==="
          
          # Extract version using grep
          echo "=== Extracting version using grep ==="
          LATEST_CLI_VERSION=$(echo "$RAW_RESPONSE" | grep -oP 'tag/\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          
          echo "=== Results ==="
          echo "CLI_VERSION: [$CLI_VERSION]"
          echo "LATEST_CLI_VERSION: [$LATEST_CLI_VERSION]"
          echo "CLI_VERSION length: ${#CLI_VERSION}"
          echo "LATEST_CLI_VERSION length: ${#LATEST_CLI_VERSION}"
          
          # Check if we got a valid version
          if [ -z "$LATEST_CLI_VERSION" ]; then
            echo "ERROR: Failed to extract latest CLI version from GitHub response"
            echo "Trying alternative extraction methods..."
            
            # Try alternative grep patterns
            ALT_VERSION1=$(echo "$RAW_RESPONSE" | grep -o 'releases/tag/[0-9][0-9.]*' | head -1 | sed 's/releases\/tag\///')
            ALT_VERSION2=$(echo "$RAW_RESPONSE" | grep -o 'tag/[0-9][0-9.]*' | head -1 | sed 's/tag\///')
            
            echo "Alternative extraction 1: [$ALT_VERSION1]"
            echo "Alternative extraction 2: [$ALT_VERSION2]"
            
            # Use the first non-empty alternative
            if [ -n "$ALT_VERSION1" ]; then
              LATEST_CLI_VERSION="$ALT_VERSION1"
              echo "Using alternative extraction 1: $LATEST_CLI_VERSION"
            elif [ -n "$ALT_VERSION2" ]; then
              LATEST_CLI_VERSION="$ALT_VERSION2"
              echo "Using alternative extraction 2: $LATEST_CLI_VERSION"
            else
              echo "FATAL: All extraction methods failed"
              exit 1
            fi
          fi
          
          echo "=== Final comparison ==="
          echo "Comparing CLI_VERSION='$CLI_VERSION' with LATEST_CLI_VERSION='$LATEST_CLI_VERSION'"
          
          if [ "$CLI_VERSION" = "$LATEST_CLI_VERSION" ]; then
            echo "✅ SUCCESS: CLI_VERSION ($CLI_VERSION) matches the latest released version ($LATEST_CLI_VERSION). Proceeding."
          else
            echo "❌ FAILURE: CLI_VERSION ($CLI_VERSION) does not match the latest released version ($LATEST_CLI_VERSION)."
            echo "This workflow will now fail."
            exit 1
          fi
          
          echo "=== CLI version check completed ==="

      - name: NPM ci and build
        run: |
          npm ci
          npm run build

      - name: Create Pull Request
        id: create_pr
        if: inputs.dev == false
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c #v6.1.0
        with:
          token: ${{ env.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "Update Version - Automated Changes"
          body: "This is an automated PR created by GitHub Actions"
          base: main
          draft: false

      - name: Wait for PR to be created
        id: pr
        if: inputs.dev == false
        uses: octokit/request-action@872c5c97b3c85c23516a572f02b31401ef82415d #v2.3.1
        with:
          route: GET /repos/${{ github.repository }}/pulls?head=${{ github.repository_owner }}:${{ env.BRANCH_NAME }}

      - name: Merge Pull Request
        if: inputs.dev == false
        uses: octokit/request-action@872c5c97b3c85c23516a572f02b31401ef82415d #v2.3.1
        with:
          route: PUT /repos/${{ github.repository }}/pulls/${{ steps.create_pr.outputs.pull-request-number }}/merge
          merge_method: squash

      - name: Push tag
        if: inputs.dev == false
        run: |
          git pull 
          git tag ${{env.TAG_NAME}}
          git push --tags

      - name: Publish npm package
        run: |
          if [ ${{ inputs.dev }} == true ]; then
            npm publish --tag=${{ inputs.jsTag }}
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      - name: Create Release
        uses: softprops/action-gh-release@a74c6b72af54cfa997e81df42d94703d6313a2d0 #v2
        with:
          name: ${{env.TAG_NAME}}
          tag_name: ${{env.TAG_NAME}}
          generate_release_notes: true
          prerelease: ${{ inputs.dev }}
  
  notify:
    if: inputs.dev == false
    needs: release
    uses: Checkmarx/plugins-release-workflow/.github/workflows/release-notify.yml@main
    with:
      product_name: Javascript Runtime Wrapper
      release_version: ${{ needs.release.outputs.TAG_NAME }}
      cli_release_version: ${{ needs.release.outputs.CLI_VERSION }}
      release_author: "Phoenix Team"
      release_url: https://github.com/CheckmarxDev/ast-cli-javascript-wrapper-runtime-cli/releases/tag/${{ needs.release.outputs.TAG_NAME }}
      jira_product_name: JS_RUNTIME_WRAPPER
    secrets: inherit

  dispatch_auto_release:
    name: Update ADO Extension With new Wrapper Version
    if: inputs.dev == false
    needs: notify
    uses: Checkmarx/plugins-release-workflow/.github/workflows/dispatch-workflow.yml@main
    with:
      cli_version: ${{ needs.release.outputs.CLI_VERSION }}
      is_cli_release: false
      is_js_runtime_release: true
    secrets: inherit